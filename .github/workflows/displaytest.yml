name: Testing Deployment

on:
  workflow_dispatch:

env:

  LOGICAPP_DIRECTORY: LogicApp

jobs:
  deploy-and-run:
    runs-on: ubuntu-latest
    environment: qa
    steps:
       - name: Checkout repository
         uses: actions/checkout@v2
        
       - name: Create Azure cred variable
         run: |
          AzureCreds=$(echo '{"clientId": "${{secrets.AZURE_CLIENT_ID}}", "clientSecret": "${{secrets.AZURE_CLIENT_SECRET}}", "subscriptionId": "${{secrets.AZURE_SUBSCRIPTION_ID}}", "tenantId": "${{secrets.AZURE_TENANT_ID}}"}' | jq -c .)
          echo "AzureCreds=$AzureCreds" >> $GITHUB_ENV
          logicAppName=$(jq -r '.parameters.LogicAppName.value' parameters.json)
          echo "LogicAppName=$logicAppName" >> $GITHUB_ENV
          automationAccountName=$(jq -r '.parameters.AutomationAccountName.value' parameters.json)
          echo "AutomationAccountName=$automationAccountName" >> $GITHUB_ENV
          echo "ResourceGroupName=${{ vars.RESOURCE_GROUP_NAME }}" >> $GITHUB_ENV
          echo "SubscriptionId=${{secrets.AZURE_SUBSCRIPTION_ID}}" >> $GITHUB_ENV
      
       - uses: azure/login@v1
         with:
          creds: ${{ env.AzureCreds }}
          
       - name: Update Runbook Content
         run: |          
          az config set extension.use_dynamic_install=yes_without_prompt

          role_name="Storage Queue Data Contributor"
          az automation account show --name "$AutomationAccountName" --query "id" --output tsv
          az storage account show --name "$StorageAccountName" --query "id" --output tsv
          # Get the Automation Account resource ID
          automation_account_id=$(az automation account show --name "$AutomationAccountName" --query "id" --output tsv)

          # Get the Storage Account resource ID
          storage_account_id=$(az storage account show --name "$StorageAccountName" --query "id" --output tsv)

          # Check if the role assignment already exists
          existing_role_assignment=$(az role assignment list --assignee "$automation_account_id" --scope "$storage_account_id" --output tsv)

          # Create the role assignment if it doesn't exist
          if [[ -z "$existing_role_assignment" ]]; then
              az role assignment create --assignee "$automation_account_id" --scope "$storage_account_id" --role "$role_name"
              echo "Role assignment created. $role_name"
          else
              echo "Role assignment already exists. $role_name"
          fi

          role_name="Storage Account Key Operator Service Role"
          existing_role_assignment=$(az role assignment list --assignee "$automation_account_id" --scope "$storage_account_id" --output tsv)

          # Create the role assignment if it doesn't exist
          if [[ -z "$existing_role_assignment" ]]; then
              az role assignment create --assignee "$automation_account_id" --scope "$storage_account_id" --role "$role_name"
              echo "Role assignment created. $role_name"
          else
              echo "Role assignment already exists. $role_name"
          fi
          #logicapp
          role_name="Storage Queue Data Contributor"
          logicapp_id=$(az logicapp show --name "$LogicAppName" --query "id" --output tsv) 
          # Get the Storage Account resource ID
          storage_account_id=$(az storage account show --name "$StorageAccountName" --query "id" --output tsv)

          # Check if the role assignment already exists
          existing_role_assignment=$(az role assignment list --assignee "$logicapp_id" --scope "$storage_account_id" --output tsv)

          # Create the role assignment if it doesn't exist
          if [[ -z "$existing_role_assignment" ]]; then
              az role assignment create --assignee "$logicapp_id" --scope "$storage_account_id" --role "$role_name"
              echo "Role assignment created. $role_name"
          else
              echo "Role assignment already exists. $role_name"
          fi
